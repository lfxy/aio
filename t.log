"=========================================================================
" DesCRiption: 适合自己使用的vimrc文件，for Linux/Windows, GUI/Console
"
" Last Change: 2010年08月02日 15时13分 
"
" Version: 1.80
"
"=========================================================================
"
let mapleader = ","

set nocompatible " 关闭 vi 兼容模式
syntax on " 自动语法高亮
colorscheme morning " 设定配色方案 /murphy
set number " 显示行号
set cursorline " 突出显示当前行
set ruler " 打开状态栏标尺
set shiftwidth=4 " 设定 << 和 >> 命令移动时的宽度为 4
set softtabstop=4 " 使得按退格键时可以一次删掉 4 个空格
set tabstop=4 	" 设定 tab 长度为 4
set nobackup " 覆盖文件时不备份
set autochdir " 自动切换当前目录为当前文件所在的目录
filetype on  
filetype plugin on
set backupcopy=yes " 设置备份时的行为为覆盖
"set ignorecase smartcase " 搜索时忽略大小写，但在有一个或以上大写字母时仍保持对大小写敏感
set nowrapscan " 禁止在搜索到文件两端时重新搜索
set incsearch " 输入搜索内容时就显示搜索结果
set ignorecase		"搜索忽略大小写
set hlsearch " 搜索时高亮显示被找到的文本
set noerrorbells " 关闭错误信息响铃
set novisualbell " 关闭使用可视响铃代替呼叫
set t_vb= " 置空错误铃声的终端代码
set showmatch " 插入括号时，短暂地跳转到匹配的对应括号
set matchtime=2 " 短暂跳转到匹配括号的时间
set magic 		" 设置魔术
set hidden " 允许在有未保存的修改时切换缓冲区，此时的修改由 vim 负责保存
set guioptions-=T 	" 隐藏工具栏
set guioptions-=m 	" 隐藏菜单栏
set smartindent " 开启新行时使用智能自动缩进
set backspace=indent,eol,start
set cmdheight=1 " 设定命令行的行数为 1
set laststatus=2 " 显示状态栏 (默认值为 1, 无法显示状态栏)
"set statusline=\ %<%F[%1*%M%*%n%R%H]%=\ %y\ %0(%{&fileformat}\ %{&encoding}\ %c:%l/%L%)\ 
"set statusline=[%F]%y%r%m%*%=[Line:%l/%L,Column:%c][%p%%]
set statusline=%F%m%r%h%w\ [FORMAT=%{&ff}]\ [TYPE=%Y]\ [POS=%l,%v][%p%%]\ %{strftime(\"%d/%m/%y\ -\ %H:%M\")}   "状态行显示的内容  
" 设置在状态行显示的信息
set foldenable		 " 开始折叠
set foldmethod=marker " 设置语法折叠 /marker,indent,diff,syntax 
set foldcolumn=1 " 设置折叠区域的宽度
setlocal foldlevel=2 " 设置折叠层数为
 set foldclose=all " 设置为自动关闭折叠 
" nnoremap <space> @=((foldclosed(line('.')) < 0) ? 'zc' : 'zo')<CR>
" 设置字体 以及中文支持
set guifont=Courier_New:h10:cANSI   " 设置字体  
set encoding=utf-8
set termencoding=utf-8
set formatoptions+=mM
set fencs=utf-8,ucs-bom,shift-jis,gb18030,gbk,gb2312,cp936
set fileencodings=ucs-bom,utf-8,cp936
if v:lang =~? '^\(zh\)\|\(ja\)\|\(ko\)'
set ambiwidth=double
endif

let s:PlugWinSize = 35
"nmap <silent> <leader>t :TlistToggle<cr>


" Buffers操作快捷方式!
"nnoremap <C-RETURN> :bnext<CR>
"nnoremap <C-S-RETURN> :bprevious<CR>

" Tab操作快捷方式!
"nnoremap <C-TAB> :tabnext<CR>
"nnoremap <C-S-TAB> :tabprev<CR>

"关于tab的快捷键
map tn :tabnext<cr>
map tp :tabprevious<cr>
map te :tabedit
map tc :tabclose<cr>
map tr :tabnew<space>

"窗口分割时,进行切换的按键热键需要连接两次,比如从下方窗口移动
"光标到上方窗口,需要<c-w><c-w>k,非常麻烦,现在重映射为<c-k>,切换的
"时候会变得非常方便.
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l


"−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
"plugin−taglist.vim查看函数列表，需要ctags程序"F4打开隐藏taglist窗口
"−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−

let Tlist_Ctags_Cmd = '/usr/bin/ctags'


"nnoremap <silent><F4> :TlistToggle<CR>
let Tlist_Show_One_File = 1 " 不同时显示多个文件的tag，只显示当前文件的
let Tlist_Exit_OnlyWindow = 1 " 如果taglist窗口是最后一个窗口，则退出vim
let Tlist_Use_Right_Window = 1 " 在右侧窗口中显示taglist窗口
"let Tlist_File_Fold_Auto_Close=2 " 自动折叠当前非编辑文件的方法列表
let Tlist_Auto_Open = 1			"czq
let Tlist_Auto_Update = 1
let Tlist_Hightlight_Tag_On_BufEnter = 1
let Tlist_Enable_Fold_Column = 1
let Tlist_Process_File_Always = 1
let Tlist_Display_Prototype = 0
let Tlist_Compact_Format = 1

map <leader>t :TlistToggle<cr>

set ai
set si

"-----------------------------------------------------------------
" plugin - NERD_tree.vim 以树状方式浏览系统中的文件和目录
" :ERDtree 打开NERD_tree :NERDtreeClose 关闭NERD_tree
" o 打开关闭文件或者目录 t 在标签页中打开
" T 在后台标签页中打开 ! 执行此文件
" p 到上层目录 P 到根目录
" K 到第一个节点 J 到最后一个节点
" u 打开上层目录 m 显示文件系统菜单（添加、删除、移动操作）
" r 递归刷新当前目录 R 递归刷新当前根目录
"-----------------------------------------------------------------
" F3 NERDTree 切换
map <F3> :NERDTreeToggle<CR>
imap <F3> <ESC>:NERDTreeToggle<CR>


let NERDSpaceDelims=1 " 让注释符与语句之间留一个空格




"-----------------------------------------------------------------
" plugin – checksyntax.vim JavaScript常见语法错误检查
" 默认快捷方式为 F5
"-----------------------------------------------------------------
let g:checksyntax_auto = 0 " 不自动检查


"-----------------------------------------------------------------
" plugin - NeoComplCache.vim 自动补全插件
"-----------------------------------------------------------------
let g:AutoComplPop_NotEnableAtStartup = 1
let g:NeoComplCache_EnableAtStartup = 1
let g:NeoComplCache_SmartCase = 1
let g:NeoComplCache_TagsAutoUpdate = 1
let g:NeoComplCache_EnableInfo = 1
let g:NeoComplCache_EnableCamelCaseCompletion = 1
let g:NeoComplCache_MinSyntaxLength = 3
let g:NeoComplCache_EnableSkipCompletion = 1
let g:NeoComplCache_SkipInputTime = '0.5'
let g:NeoComplCache_SnippetsDir = $VIMFILES.'/snippets'
inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
imap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)
smap <silent> <C-e> <Plug>(neocomplcache_snippets_expand)





"autocmd InsertLeave * se nocul  " 用浅色高亮当前行  
"autocmd InsertEnter * se cul    " 用浅色高亮当前行  

"""""新文件标题""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"新建.c,.h,.sh,.java文件，自动插入文件头 

autocmd BufNewFile *.cpp,*.[ch],*.sh,*.java exec ":call SetTitle()" 

""定义函数SetTitle，自动插入文件头 

func SetTitle() 

    "如果文件类型为.sh文件 
    if &filetype == 'sh' 
        call setline(1,"\#########################################################################") 
        call append(line("."), "\# File Name: ".expand("%")) 
        call append(line(".")+1, "\# Author: ma6174") 
        call append(line(".")+2, "\# mail: ma6174@163.com") 
        call append(line(".")+3, "\# Created Time: ".strftime("%c")) 
        call append(line(".")+4, "\#########################################################################") 
        call append(line(".")+5, "\#!/bin/bash") 
        call append(line(".")+6, "") 

    else 
        call setline(1, "/*************************************************************************") 
        call append(line("."), "    > File Name: ".expand("%")) 
        call append(line(".")+1, "    > Author: ma6174") 
        call append(line(".")+2, "    > Mail: ma6174@163.com ") 
        call append(line(".")+3, "    > Created Time: ".strftime("%c")) 
        call append(line(".")+4, " ************************************************************************/") 
        call append(line(".")+5, "")

    endif

    if &filetype == 'cpp'
        call append(line(".")+6, "#include<iostream>")
        call append(line(".")+7, "using namespace std;")
        call append(line(".")+8, "")
    endif

    if &filetype == 'c'
        call append(line(".")+6, "#include<stdio.h>")
        call append(line(".")+7, "")
    endif

    "新建文件后，自动定位到文件末尾
    autocmd BufNewFile * normal G

endfunc 

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"nnoremap <C-F2> :vert diffsplit "比较文件  
"set completeopt=preview,menu "代码补全 
set clipboard+=unnamed "共享剪贴板  
set autowrite	"自动保存
set autoindent		" 自动缩进
set cindent			" 使用C样式的缩进
set gdefault		"行内替换
set langmenu=zh_CN.UTF-8		"语言设置
set helplang=cn



set whichwrap+=<,>,h,l		" 允许backspace和光标键跨越行边界
set selection=exclusive
set selectmode=mouse,key
set report=0		" 通过使用: commands命令，告诉我们文件的哪一行被改变过

set fillchars=vert:\ ,stl:\ ,stlnc:\		" 在被分割的窗口间显示空白，便于阅读


""""""""""""""""""""""""""""""""""""""自动补全“”“”“”“”“”“”“”“”“”“”“”“”“”“”“”“”“”
:inoremap ( ()<ESC>i
:inoremap ) <c-r>=ClosePair(')')<CR>
:inoremap { {<CR>}<ESC>O
:inoremap } <c-r>=ClosePair('}')<CR>
:inoremap [ []<ESC>i
:inoremap ] <c-r>=ClosePair(']')<CR>
:inoremap " ""<ESC>i
:inoremap ' ''<ESC>i

function! ClosePair(char)
    if getline('.')[col('.') - 1] == a:char
        return "\<Right>"
    else
        return a:char
    endif
endfunction

filetype plugin on 
filetype indent on 
set completeopt=longest,menu		"打开文件类型检测, 加了这句才可以用智能补全
""""""""""""""""""""""""""""""""""""""自动补全“”“”“”“”“”“”“”“”“”“”“”“”“”“”“”“”“”

set tags+=./tags  
set tags+=../tags  
set tags+=../../tags  
let g:miniBufExplMapWindowNavVim = 1
let g:miniBufExplMapWindowNavArrows = 1
let g:miniBufExplMapCTabSwitchBufs = 1
let g:miniBufExplModSelTarget = 1
let g:winManagerWidth = 40

let g:winManagerWindowLayout='FileExplorer,TagList'
nmap wm :WMToggle<cr>


" 将光标定位到上次VIM关闭时的位置
if has("autocmd")
    autocmd BufReadPost *
                \ if line("'\"") > 0 && line("'\"") <= line("$") |
                \   exe "normal g`\"" |
                \ endif
endif


" 是否使用 quickfix 窗口来显示 cscope 结果
"set cscopequickfix=s-,c-,d-,i-,t-,e-
" Symbol
"nmap <C-_>s :cs find s <C-R>=expand("<cword>")<CR><CR>
" Global define
"nmap <C-_>g :cs find g <C-R>=expand("<cword>")<CR><CR>
" Called
"nmap <C-_>c :cs find c <C-R>=expand("<cword>")<CR><CR>
" Callee
"nmap <C-_>t :cs find t <C-R>=expand("<cword>")<CR><CR>
" Tags
"nmap <C-_>e :cs find e <C-R>=expand("<cword>")<CR><CR>
" Egrep
"nmap <C-_>f :cs find f <C-R>=expand("<cfile>")<CR><CR>
" File
"nmap <C-_>i :cs find i <C-R>=expand("<cfile>")<CR>$<CR>
" Files that Included this file
"nmap <C-_>d :cs find d <C-R>=expand("<cword>")<CR><CR>

set showcmd
set listchars=tab:>-,trail:-,eol:$
set showmode
let g:SuperTabRetainCompletionType=2
let g:SuperTabDefaultCompletionType="<C-X><C-O>"

map <F10> :set paste<CR>
map <F11> :set nopaste<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"一些不错的映射转换语法（如果在一个文件中混合了不同语言时有用）
"nnoremap <leader>1 :set filetype=xhtml<CR>
"nnoremap <leader>2 :set filetype=css<CR>
"nnoremap <leader>3 :set filetype=javascript<CR>
"nnoremap <leader>4 :set filetype=php<CR>

" set fileformats=unix,dos,mac
" nmap <leader>fd :se fileformat=dos<CR>
" nmap <leader>fu :se fileformat=unix<CR>

" use Ctrl+[l|n|p|cc] to list|next|previous|jump to count the result
" map <C-x>l <ESC>:cl<CR>
" map <C-x>n <ESC>:cn<CR>
" map <C-x>p <ESC>:cp<CR>
" map <C-x>c <ESC>:cc<CR>


" 让 Tohtml 产生有 CSS 语法的 html
" syntax/2html.vim，可以用:runtime! syntax/2html.vim
"let html_use_css=1

" Python 文件的一般设置，比如不要 tab 等
"autocmd FileType python set tabstop=4 shiftwidth=4 expandtab
"autocmd FileType python map <F12> :!python %<CR>

" 选中状态下 Ctrl+c 复制
"vmap <C-c> "+y


"let b:javascript_fold=1		" 打开javascript折叠

"let javascript_enable_domhtmlcss=1		" 打开javascript对dom、html和css的支持
" 设置字典 ~/.vim/dict/文件的路径
"autocmd filetype javascript set dictionary=VIMFILES/dict/javascript.dictautocmdfiletypecsssetdictionary=VIMFILES/dict/css.dict
"autocmd filetype php set dictionary=VIMFILES/dict/php.dict

"−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−
"plugin−bufexplorer.vimBuffers切换"\be全屏方式查看全部打开的文件列表"\bv左右方式查看\bs上下方式查看
"−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−−






" 映射全选+复制 ctrl+a
"map <C-A> ggVGY
"map! <C-A> <Esc>ggVGY
"map <F12> gg=G
" 选中状态下 Ctrl+c 复制
"map! <C-c> "+y
"nnoremap <F2> :g/^\s*$/d<CR>  "去空行  

"filetype on			" 侦测文件类型
"filetype plugin on		" 载入文件类型插件
"filetype indent on		" 为特定文件类型载入相关缩进文件
"set viminfo+=!		" 保存全局变量
"set iskeyword+=_,$,@,%,#,-		" 带有如下符号的单词不要被换行分割
"set linespace=0			" 字符间插入的像素行数目
"set wildmenu		" 增强模式中的命令行自动完成操作
"set noexpandtab		" 不要用空格代替制表符
"set autoread " 设置当文件被改动时自动载入
"set smarttab		" 在行和段开始处使用制表符
"set history=1000		" 历史记录数
"set noswapfile      " 不使用swp文件，注意，错误退出后无法恢复



"-----------------------------------------------------------------
" plugin - DoxygenToolkit.vim 由注释生成文档，并且能够快速生成函数标准注释
"-----------------------------------------------------------------
"let g:DoxygenToolkit_authorName="Asins - asinsimple AT gmail DOT com"
"let g:DoxygenToolkit_briefTag_funcName="yes"
"map <leader>da :DoxAuthor<CR>
"map <leader>df :Dox<CR>
"map <leader>db :DoxBlock<CR>
"map <leader>dc a /* */<LEFT><LEFT><LEFT>

